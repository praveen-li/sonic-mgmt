# This Playbook is used to generate Sensors Meta Data for new platforms for SONIC.
# Sensors Meta Data can be appended in ansible/group_vars/sonic/sku-sensors-data.yml
# to use it for sensors test suite.
#
# Without this playbook user has to go through tedious process for creating this Meta
# data Manually.
#
# How it works:
# This playbook uses sensors_facts module to collect the data from sonic device.
#   - Argument to sensors_facts module will be an empty dictionary.
# Then it uses sensors_meta_data module to generate a file with meta data.
# Meta data will be in same format as in file ansible/group_vars/sonic/sku-sensors-data.yml
# Caveat: file will also have a field [others] for non classified sensors. User has to
# classify this part manually.
#
# Usage:
# ansible-playbook -i lab -l falco-test-dut02 sensors_create_metadata.yml
# -e "file=/tmp/praveen/sensorsMetaData.txt hwsku=Seastone-DX010"
#
# args:
# -l sonic_dut          Sonic device
# -e file               output file
# -e hwsku              platform hwsku such as Seastone-DX010

- hosts: sonic
  remote_user: admin

  tasks:
  - name: Get platform monitor docker name
    shell: docker ps -a --format '{{'{{'}}.Image{{'}} {{'}}.Names{{'}}'}}' | grep 'platform' | awk '{print $2}'
    register: pmon_ps

  - debug:
      var: pmon_ps

  - set_fact:
      ansible_python_interpreter: "docker exec -i {{ pmon_ps.stdout }} python"

  - set_fact:
      checks: {'alarms': {}, 'compares': {}, 'non_zero': {}, 'psu_skips': {}}

  - name: Gather sensors
    sensors_facts: checks={{ checks }}
    vars:
      ansible_shell_type: docker

  - set_fact:
     ansible_python_interpreter: "/usr/bin/python"

  - name: print variables
    debug:
      msg: "sensors_raw: {{ sensors['raw'] }}; file: {{ file }}; hwsku: {{ hwsku }}"

  - name: create sensors meta data file
    sensors_meta_data: sensors_raw={{ sensors['raw'] }} file_name={{ file }} hwsku={{ hwsku }}
    connection: local
    register: sensors_metadata

  - debug: msg="{{ sensors_metadata }}"
